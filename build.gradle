plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.7'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
	id 'org.asciidoctor.jvm.convert' version '3.3.2' // 아스키독터에 대한 플러그인 추가
}

group = 'sample'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = JavaVersion.VERSION_11
	targetCompatibility = JavaVersion.VERSION_11
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	asciidoctorExt // 아스키독 익스텐션에 대한 configurations
}

repositories {
	mavenCentral()
}

dependencies {
	// Spring Boot
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	// test
	testImplementation 'org.springframework.boot:spring-boot-starter-test' // JUnit 5 , AssertJ 포함

	// lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// h2
	runtimeOnly 'com.h2database:h2'

	// Guava
	implementation("com.google.guava:guava:33.2.0-jre")

	// REST Docs
	asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc' // REST Docs 작성시 보통 MockMVC를 많이 사용함
}

tasks.named('test') {
	useJUnitPlatform()
}

ext{ // 전역 변수
	// 문서의 조각들을 스니팻이라고 부르면서 조각을 만듦, 해당 경로 지정
	snippetsDir = file('build/generated-snippets')
}
test{
	// REST Docs를 만들 테스트를 작성할 것임 , TEST의 결과물로 문서 파일로 나올 때 디렉토리로 지정하는 것. 위에서 만든 snippetsDir
	outputs.dir snippetsDir
}
asciidoctor{
	inputs.dir snippetsDir
	configurations 'asciidoctorExt' // 확장 플러그인을 여기 적용
	sources{ // 특정 파일만 html로 만든다.
		include("**/index.adoc")
	}
	baseDirFollowsSourceFile() // 다른 adoc 파일을 include 할 때 경로를 baseDir로 맞춘다.
	// 위에서 만든 test를 수행하고, 현재 이 asciidoctor가 실행된다. asciidoctor가 실행될 때 snippetsDir 디렉토리에있는 결과물을 통해 문서를 만든다.
	dependsOn test
}
bootJar{ // 자르를 만드는 과정
	dependsOn asciidoctor // asciidoctor 의존성을 건다.
	from("${asciidoctor.outputDir}"){
		into 'static/docs'
	}
}